// This is a program that tests nested if loops
main ( ) {
	error = 0;

	a = 1;
	b = 5;
	c = 45;
	y = 0;
	
	y = y + (c - b);

	s = "test";
	
    // testFunction( inp: x = a+b, y = (a+c)*b, z = (c-5)*3-y, out: xy= xy, xz=xz, yz=yz);
    // if ( xy != -199 || xz != -2 || yz != -198 ) {
    //    show( "ERROR for Func ops: ", "xy= ", xy, " xz= ", xz, " yz= ", yz);
    //    error = 1;
    // }
    // else {
    //    show ("Func ops PASSED ......");
    // }
	
	miscCalcs(inp: a=a, b=b, c=c, out: x=x, y=y, z=z);
	show ( "---- Test1 ---------------------------------------------------");
	show ( "x= ", x, " y= ", y, " z= ", z ) ;
	if ( x < 135 || x > 136 || y != 118.0 || z != 10 ) {
		show( "ERROR for TEST1");
		error = 1;
	} 
	else {
		show ("TEST1 PASSED ......");
	}
	show("---- End of Test1 ------------------------------------------------");
	
	a = 1;
	b = 2;
	c = 48; 
	
	miscCalcsNoStatementsOnClosingCbrackets(inp: a=a, b=b, c=c, out: x=x1, y=y1, z=z1);
	show ( "---- Test2 ---------------------------------------------------");
	show ( "x1= ", x1, " y1= ", y1, " z1= ", z1 ) ;
	if ( x1 < 158 || x1 > 159 || y1 < 80 || y1 > 81 || z1 < 45 || z1 > 46 ) {
		show( "ERROR for TEST2");
		error = 1;
	} 
	else {
		show ("TEST2 PASSED ......");
	}
	show("---- End of Test2 ------------------------------------------------");
	
	if( error == 1 ) {
		show ( "\n\nTEST FAILED\n\n");
	}
	else {
		show ( "\n\nALL TESTS PASSED\n\n");
	}
	
}
//------------------------------------------------------
miscCalcs(inp: a, b, c, out: x, y, z) {
	x=0;
	y=8;
	z=0;

	if ( a == 1 ) {
		z = 5 ;
	}
	z = z + 2 ;

	if ( b == 1 ) {
		z = z + 1 ;
	}
    else if ( b == 2 ) {
		z = z + 4 ;
	}
    else {
		z = z + 5 + y;
	}
	y = z - y ;

	if ( c > 1 )  {    			// IF3
		x = x + 10 ;
		if ( c > 10 ) {			// IF30
			x = x + 20 ;
		} 
		if ( c > 30 ) {			// IF300
			x = x + 30 ;
		} 
		if ( c > 40 ) {			// IF3000
			x = x + 40 ;
			if ( c < 50 ) {     // IF30000
				x = x - 2 ;
				y = y + 10 ;
				if ( x == 98 && a == 1 && b == 5 ) { // IF00000
					x = x - y ;
				}
				if (a == 1) { // IF000000
					for(i=0; i<6; i=i+1){
						x = x + i;
					}
					numArray[0] = x;
					numArray[1] = y;
					numArray[2] = z;
					calculateStats( inp:dataArray=numArray, out:ave=ave, min=min, max=max);
					show ( "ave= ", ave, " min= ", min, " max =", max);
					x = x + ave;
				}
			}
			y = 5 + y + max;
		}
		z = z+10 - min;
	}
	show ( "For a=1; b=5; c=45; Result should be X=135.33 y=118 z=10\n", "a= ", a, " b= ", b, " c= ", c, "\n", "x= ", x, " y= ", y, " z= ", z ) ;
}
//------------------------------------------------------
#if 1
miscCalcsNoStatementsOnClosingCbrackets(inp: a, b, c, out: x, y, z) {
	x=0;
	y=8;
	z=0;

	if ( a == 1 ) {
		z = 5 ;
	}
	z = z + 2 ;

	if ( b == 1 ) {
		z = z + 1 ;
	}
    else if ( b == 2 ) {
		z = z + 4 ;
	}
    else {
		z = z + 5 + y;
	}
	y = z - y ;

	if ( c > 1 ) {     			// IF3
		x = x + 10 ;
		if ( c > 10 ) {			// IF30
			x = x + 20 ;
		} 
		if ( c > 30 ) {			// IF300
			x = x + 30 ;
		} 
		if ( c > 40 ) {			// IF3000
			x = x + 40 ;
			if ( c < 50 ) {     // IF30000
				x = x - 2 ;
				y = y + 10 ;
				if ( x == 98 && a == 1 && b == 5 ) { // IF00000
					x = x - y ;
				}
				if (a == 1) { // IF000000
					for(i=0; i<6; i=i+1){
						x = x + i;
					}
					numArray[0] = x;
					numArray[1] = y;
					numArray[2] = z;
					calculateStats( inp:dataArray=numArray, out:ave=ave, min=min, max=max);
					show ( "ave= ", ave, " min= ", min, " max =", max);
					x = x + ave;
					y = y + (max - ave);
					z = z + (ave - min);
				}
			}
		}
	}
	show ( "For a=1; b=5; c=45; Result should be X=135.33 y=118 z=10\n", "a= ", a, "b= ", b, "c= ", c, "\n", "x= ", x, " y= ", y, " z= ", z ) ;
	
	
}
#endif
// -------------------------------------------------
#if 1
calculateStats( inp: dataArray, out: ave, min, max) {
	max = -10000;
	min = 10000;
	ave = 0;
	
	for(i=0; i< lengthOf(dataArray); i = i + 1) {
		ave = ave + dataArray[i];
		if ( dataArray[i] >  max ) {
			max = dataArray[i];
		}
		if ( dataArray[i] < min ) {
			min = dataArray[i];
		}
	}
	ave = ave / lengthOf(dataArray);
}
#endif

