// Mission to Mars with Programa
main () {
	// Constants
	earthToMarsDistance = 2.25e11;
	gravitationalForce = 6.67408e-11;
	pi = 3.14159;
	secsInADay = 60 * 60 * 24;
	// Graphics window
	frame.x = 0;
	frame.y = 0;
	frame.w = 800;
	frame.h = 800;
    //- Create a graphics window and add planets and spacecraft
	createGraphics ( "Misson to Mars" , 50 , 900 , 800 , 800 , "universe.png"  ) ;
	makeCircularObject ( inp: name = "earth" , x = 100 , y = 100 , radious = 100 , mass = 5.972e24 , refCorner = "CENTER" , borderColor = "" , fillColor = "" , imageName = "earth.png"  , out: object = earth  ) ;
	planets[0] = earth;
	makeCircularObject ( inp: name = "mars" , x = 600 , y = 600 , radious = 55 , mass = 6.39e26 , refCorner = "CENTER" , borderColor = "white" , fillColor = "black" , imageName = ""  , out: object = mars  ) ;
	planets[1] = mars;
	makeCircularObject ( inp: name = "rocket" , x = 110 , y = 205 , radious = 5 , mass = 1.180e6 , refCorner = "CENTER" , borderColor = "white" , fillColor = "red" , imageName = ""  , out: object = rocket  ) ;
    // Add forces
	createArrow ( "earthForce" , rocket.x , rocket.y , earthForceScaled , 10 , "white" , "cyan" , 0  ) ;
	createArrow ( "marsForce" , rocket.x , rocket.y , marsForceScaled , 10 , "white" , "orange" , 0  ) ;
    //- Create User Interface buttons and input fields
    createActionButton ( 50 , 750 , 80 , 30 , "CENTER" , "blue" , "black" , "white" , "Arial:12" , "Start" , "startButtonClicked"  ) ;
    createActionButton ( 150 , 750 , 80 , 30 , "CENTER" , "blue" , "black" , "white" , "Arial:12" , "Finish" , "finishButtonClicked"  ) ;
    createTextFieldWithLabel ( 50 , 700 , 50 , 20 , "CENTER" , "blue" , "darkGray" , "black" , "Arial:12" , "CENTER" , "Speed" , "clear" , "green" , "Arial:12" , "Speed" ) ;
    createTextFieldWithLabel ( 150 , 700 , 50 , 20 , "CENTER" , "blue" , "darkGray" , "black" , "Arial:12" , "CENTER" , "Angle" , "clear" , "blue" , "Arial:12" , "Angle" ) ;
    //- Calculate initial parameters
	// Calcuate scaling of graphics window with actual distances
	earthMarsDistInView.x = mars.x - earth.x;
	earthMarsDistInView.y = mars.y - earth.y;
	earthMarsDistInView = hypot ( earthMarsDistInView.x , earthMarsDistInView.y  ) ;
	scale = earthToMarsDistance / earthMarsDistInView;
	showForces = "false";
	finishButtonClicked = "false";
	stopMovement = "true";
	startButtonClicked  = "false";
	initLocation.x = rocket.x;
	initLocation.y = rocket.y;
	timeStep = secsInADay * 24 ;
	// Launch parameters
	Angle = 78;
	Speed = 115;
	globalTime = 0;
	while (    finishButtonClicked == "false"    ) {
		if (    startButtonClicked == "true"    ) {
			//- Initialization parameter every time user hits "Start" button
			rocket.x = initLocation.x ;
			rocket.y = initLocation.y ;
			angleInPi = pi * Angle / 180;
			speed.x = Speed * cos ( angleInPi ) ;
			speed.y = Speed  * sin ( angleInPi ) ;
			stopMovement = "false";
			startButtonClicked  = "false";
			globalTime = 0;
		}
        //- Calculation of the position and speed of the rocket over time
		while (     stopMovement == "false"     ) {
			distanceToEarth.x = earth.x - rocket.x ;
			distanceToEarth.y = earth.y - rocket.y ;
			distanceToEarthX = distanceToEarth.x * scale;
			distanceToEarthY = distanceToEarth.y * scale;
			distanceToMars.x = mars.x - rocket.x ;
			distanceToMars.y = mars.y - rocket.y;
			distanceToMarsX = distanceToMars.x * scale;
			distanceToMarsY = distanceToMars.y * scale;
			distanceToEarth = hypot (  distanceToEarthX , distanceToEarthY  ) ;
			distanceToMars = hypot ( distanceToMarsX , distanceToMarsY  ) ;
			distanceToEarthP2 = pow ( distanceToEarth ,  2  ) ;
			distanceToMarsP2 = pow ( distanceToMars ,  2  ) ;
			//- Calculate planet forces on rocket
			earthForce = gravitationalForce * earth.mass * rocket.mass / distanceToEarthP2  ;
			earthForce.x = distanceToEarthX * earthForce / distanceToEarth;
			earthForce.y = distanceToEarthY * earthForce / distanceToEarth;
			marsForce = gravitationalForce * mars.mass * rocket.mass / distanceToMarsP2 ;
			marsForce.x = distanceToMarsX * marsForce / distanceToMars;
			marsForce.y = distanceToMarsY * marsForce / distanceToMars;
			totalForce.x = marsForce.x + earthForce.x ;
			totalForce.y = marsForce.y + earthForce.y;
            //- Calculate distance traveled and speed of rocket
			// Calculate distance traveled due to initial speed
			distTraveledFromSpeed.x = speed.x * timeStep;
			distTraveledFromSpeed.y = speed.y * timeStep;
			// Calculate distance traveled due to gravitational forces
			distTraveledFromForce.x = ( 1/2 ) * totalForce.x * timeStep *  timeStep / rocket.mass ;
			distTraveledFromForce.y = ( 1/2 ) * totalForce.y * timeStep *  timeStep / rocket.mass ;
			// Totoal distances
			distanceTraveledX = distTraveledFromSpeed.x + distTraveledFromForce.x;
			distanceTraveledY = distTraveledFromSpeed.y + distTraveledFromForce.y;
			// Calculate new speed of rocket
			speed.x = distanceTraveledX / timeStep;
			speed.y = distanceTraveledY / timeStep;
			rocket.x = rocket.x + distanceTraveledX  / scale;
			rocket.y = rocket.y + distanceTraveledY  / scale;
			//- Check to see whether the rocket is outside the graphics area or it has landed
			isOutsideFrame ( inp: object = rocket , frame = frame  , out: isOutside = outsideFrame  ) ;
			isInTopOfPlanet ( inp: planets = planets , object = rocket  , out: rocketLanded = landed  ) ;
			if (      outsideFrame == "true" || landed == "true"      ) {
				stopMovement = "true" ;
				speed.x = 0;
				speed.y = 0;
			}
			else {
				updateGraphics ( "rocket" , "position", rocket.x , rocket.y  ) ;
			}
            //- Create the force vectors
			if (     showForces == "true"     ) {
				calculateAngle ( inp: distance = distanceToEarth , object = rocket  , out: angle = earthAngle , position = earthForceVecPos  ) ;
				calculateAngle ( inp: distance = distanceToMars , object = rocket  , out: angle = marsAngle , position = marsForceVecPos  ) ;
				earthForceScaled = 100 * abs ( earthForce  ) ;
				marsForceScaled = 500 * abs ( marsForce  ) ;
				marsForceScaled = sqrt ( marsForceScaled  ) ;
				updateGraphics ( "marsForce" , "position", marsForceVecPos.x , marsForceVecPos.y , marsAngle , marsForceScaled  ) ;
				updateGraphics ( "earthForce" , "position", earthForceVecPos.x , earthForceVecPos.y , earthAngle , earthForceScaled  ) ;
			}
		}
		globalTime = globalTime + timeStep;
	}
	show ( "Program finished"  ) ;
}
//- Function that checks whether rocket has been landed
isInTopOfPlanet (inp: planets , object out: rocketLanded  ) {
	rocketLanded = "false";
	center.x = object.x +  object.radious ;
	center.y = object.y +  object.radious ;
	//show ( center.x , " " , center.y , " "  ) 
	for (     i = 0     ;     i < lengthOf(planets )     ;     i ++     ) {
		planet = planets[i];
		distance.x = center.x - planet.x;
		distance.y = center.y - planet.y;
		distanceFromPlanet = hypot ( distance.x , distance.y  ) ;
		if (      distanceFromPlanet <= planet.radious      ) {
			rocketLanded = "true";
			break;
		}
	}
}
//- Function that checks whether rocket is out of the frame
isOutsideFrame (inp: object , frame out: isOutside  ) {
	isOutside = "false" ;
	if (     object.x < frame.x      ) {
		isOutside = "true" ;
	}
	if (     object.x > (frame.x + frame.w )     ) {
		isOutside = "true" ;
	}
	if (     object.y < frame.y     ) {
		isOutside = "true" ;
	}
	if (     object.y > (frame.y + frame.h )     ) {
		isOutside = "true" ;
	}
}
//- Function that calculates the angle of the rocket from a planet
calculateAngle (inp: distance , object out: angle , position  ) {
	pi = 3.14159265359;
	dydx = distance.y / distance.x;
	angleInRad = ( 180 / pi ) * atan ( dydx  ) ;
	if (     distance.x < 0     ) {
		angle = 180 +  angleInRad;
	}
	else if (     distance.y < 0     ) {
		angle = 360 +  angleInRad;
	}
	else {
		angle =  angleInRad;
	}
	angleInRad = pi * ( angle / 180 ) ;
	ca = cos ( angleInRad  ) ;
	sa = sin ( angleInRad  ) ;
	pox = object.x + 0.5 * object.width;
	ox = 0.5 * object.width * cos ( angleInRad ) ;
	position.x = pox + ox;
	poy = object.y + 0.5 * object.height ;
	oy = 0.5 * object.height * sin ( angleInRad ) ;
	position.y = poy + oy ;
	//show ( object.x, " " object.y, " ", position.x, " = ", position.y, " (", angle, " ) ", ca, " ", sa, " [", pox, " ", poy, "] ", " [", ox, " ", oy, "] " )
}
//- Definition of a circular object to create the planets and the rocket
makeCircularObject (inp: name, x, y, radious, mass, refCorner, borderColor, fillColor, imageName out: object  ) {
	object.x = x;
	object.y = y;
    object.radious = radious;
    object.mass = mass;
    size = 2*radious;
	createCircularObject ( name, x, y, size, size, refCorner, borderColor , fillColor, imageName  ) ;
}
